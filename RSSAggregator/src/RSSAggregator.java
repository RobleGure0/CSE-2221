import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Roble Gure
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>");
        String title = "";
        int index = getChildElement(channel, "title");
        if (index != -1) {
            XMLTree titleTree = channel.child(index);
            if (titleTree.numberOfChildren() > 0) {
                title = titleTree.child(0).label();
            }
        }
        out.println(title);
        out.println("</title>");
        out.println("</head>");
        out.println("<body>");
        String link = "";
        int getLink = getChildElement(channel, "link");
        if (getLink != -1) {
            XMLTree linkTree = channel.child(getLink);
            if (linkTree.numberOfChildren() > 0) {
                link = linkTree.child(0).label();
            } else {
                out.print("No child available");
            }
        }
        out.print("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>");
        String description = "";
        int getDescription = getChildElement(channel, "description");
        if (getDescription != -1) {
            XMLTree descriptionTree = channel.child(getDescription);
            if (descriptionTree.numberOfChildren() > 0) {
                description = descriptionTree.child(0).label();
            } else {
                out.print("No description available");
            }
        }
        out.println(description);
        out.println("</p>");
        out.println("<table border= '1'>");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.print("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.print("</body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        int pubDateIndex = getChildElement(item, "pubDate");
        if (pubDateIndex != -1) {
            String pubDate = item.child(pubDateIndex).child(0).label();
            out.println("<td>" + pubDate + "</td>");
        } else {
            out.println("<td>No date available</td>");
        }

        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1) {
            String sourceUrl = item.child(sourceIndex).attributeValue("url");
            String sourceName = "";
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                sourceName = item.child(sourceIndex).child(0).label();
            }
            out.println("<td><a href=\"" + sourceUrl + "\">" + sourceName
                    + "</a></td>");
        } else {
            out.println("<td>No source available</td>");
        }

        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1) {
            String title = "";
            XMLTree titleElement = item.child(titleIndex);
            if (titleElement.numberOfChildren() > 0) {
                title = titleElement.child(0).label();
            } else {
                out.println("No title available");
            }

            int linkIndex = getChildElement(item, "link");
            if (linkIndex != -1) {
                String linkUrl = "";
                XMLTree linkElement = item.child(linkIndex);
                if (linkElement.numberOfChildren() > 0) {
                    linkUrl = linkElement.child(0).label();
                } else {
                    out.println("No link available");
                }

                out.println("<td><a href=\"" + linkUrl + "\">" + title
                        + "</a></td>");
            } else {
                out.println("<td>" + title + "</td>");
            }
        } else {
            int descriptionIndex = getChildElement(item, "description");
            if (descriptionIndex != -1) {
                String description = "";
                XMLTree descriptionElement = item.child(descriptionIndex);
                if (descriptionElement.numberOfChildren() > 0) {
                    description = descriptionElement.child(0).label();
                } else {
                    out.println("No description available");
                }
                out.println("<td>" + description + "</td>");
            } else {
                out.println("<td>No title or description available</td>");
            }
        }
    }

    /**
     *
     * Processes one
     *
     * XML RSS (version 2.0) feed from a given URL converting it into the
     * corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */

    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url, true);
        if (xml.isTag() && xml.label().equals("rss")
                && (xml.hasAttribute("version")
                        && (xml.attributeValue("version").equals("2.0")))) {
            XMLTree channel = xml.child(0);
            outputHeader(channel, out);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree item = channel.child(i);
                if (item.isTag() && item.label().equals("item")) {
                    processItem(item, out);
                }
            }
            outputFooter(out);
        } else {
            out.print("This is not a valid RSS 2.0 feed");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        SimpleWriter fileOut = null;
        boolean invalidXML = true;
        XMLTree xml = null; // sorry had to use null statements,
        while (invalidXML) { // couldn't think of any default values to set these to
            out.print(
                    "Enter the name of an XML file containing a list of RSS feeds: ");
            String input = in.nextLine().trim();
            xml = new XMLTree1(input, true);
            if (xml.isTag() && xml.label().equals("feeds")) {
                if (xml.hasAttribute("title")) {
                    invalidXML = false;
                }
            }
            if (invalidXML) {
                out.print("Invalid XML please try again");
            }
        }
        boolean invalidHTML = true;
        while (invalidHTML) {
            out.print("Enter the name of a file with an html ending: ");
            String htmlFile = in.nextLine().trim();
            if (htmlFile.endsWith(".html")) {
                fileOut = new SimpleWriter1L(htmlFile);
                invalidHTML = false;
            } else {
                out.println("Invalid HTML please try again");
            }
        }
        String title = xml.attributeValue("title");
        fileOut.print("<html>");
        fileOut.print("<head>");
        fileOut.print("<title>" + title + "</title>");
        fileOut.print("</head>");
        fileOut.print("<h1>" + title + "</h1>");
        fileOut.print("<body>");
        fileOut.print("<ul>");

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            XMLTree child = xml.child(i);
            if (child.isTag() && child.label().equals("feed")) {
                String url = xml.child(i).attributeValue("url");
                String file = xml.child(i).attributeValue("file");
                String name = xml.child(i).attributeValue("name");
                SimpleWriter feedGenerator = new SimpleWriter1L("data/" + file);
                processFeed(url, file, feedGenerator);
                fileOut.println(
                        "<li><a href=\"" + file + "\">" + name + "</a></li>");

            }
        }
        fileOut.print("</ul>");
        fileOut.print("</body>");
        fileOut.print("</html>");
        fileOut.close();

        in.close();
        out.close();
    }

}
